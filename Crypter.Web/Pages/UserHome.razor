@page "/user/home"

@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService
@inject IUserService UserService

<div class="container my-4">
   <div class="row">
      <UserReceivedItemsComponent @bind-Items="Received"></UserReceivedItemsComponent>
      <UserSentItemsComponent @bind-Items="Sent"></UserSentItemsComponent>
   </div>
   <div class="row justify-content-center">
      <div class="col-md-8">
         <div class="card mb-4">
            <div class="card-body">
               <h5 class="card-title">A message from the developers</h5>
               <p>
                  Thank you for signing up to use Crypter and participating in our beta program.
                  The purpose of this beta program is to discover bugs and gather real feedback from friends, family, and colleagues.
                  It also gives us time to finish adding some important features to this part of the website before we open it up to the public.
               </p>
               <p>Do not hesitate to contact us with your feedback and suggestions.  We really do want to hear from you!</p>
               <p class="float-end"> - Jack, Santiago, & Steven</p>
            </div>
         </div>
      </div>
   </div>
</div>

@code {
   private IEnumerable<UserSentItem> Sent;
   private IEnumerable<UserReceivedItem> Received;

   protected override async Task OnInitializedAsync()
   {
      if (AuthenticationService.User == null)
      {
         NavManager.NavigateTo("/");
      }

      await JsRuntime.InvokeVoidAsync("setPageTitle", "Crypter - User Home");
      Sent = await GetUserSentItems();
      Received = await GetUserReceivedItems();
   }

   private async Task<IEnumerable<UserSentItem>> GetUserSentItems()
   {
      var (_, sentMessagesResponse) = await UserService.GetUserSentMessagesAsync();
      var (_, sentFilesresponse) = await UserService.GetUserSentFilesAsync();

      return sentMessagesResponse.Messages
         .Select(x => new UserSentItem
         {
            Id = x.Id,
            Name = string.IsNullOrEmpty(x.Subject) ? "{no subject}" : x.Subject,
            RecipientId = x.RecipientId,
            RecipientUsername = x.RecipientUsername,
            RecipientPublicAlias = x.RecipientPublicAlias,
            IsFile = false,
            ExpirationUTC = x.ExpirationUTC
         })
         .Concat(sentFilesresponse.Files
            .Select(x => new UserSentItem
            {
               Id = x.Id,
               Name = x.FileName,
               RecipientId = x.RecipientId,
               RecipientUsername = x.RecipientUsername,
               RecipientPublicAlias = x.RecipientPublicAlias,
               IsFile = true,
               ExpirationUTC = x.ExpirationUTC
            }))
         .OrderBy(x => x.ExpirationUTC);
   }

   private async Task<IEnumerable<UserReceivedItem>> GetUserReceivedItems()
   {
      var (_, receivedMessagesResponse) = await UserService.GetUserReceivedMessagesAsync();
      var (_, receivedFilesresponse) = await UserService.GetUserReceivedFilesAsync();

      return receivedMessagesResponse.Messages
         .Select(x => new UserReceivedItem
         {
            Id = x.Id,
            Name = string.IsNullOrEmpty(x.Subject) ? "{no subject}" : x.Subject,
            SenderId = x.SenderId,
            SenderUsername = x.SenderUsername,
            SenderPublicAlias = x.SenderPublicAlias,
            IsFile = false,
            ExpirationUTC = x.ExpirationUTC
         })
         .Concat(receivedFilesresponse.Files
            .Select(x => new UserReceivedItem
            {
               Id = x.Id,
               Name = x.FileName,
               SenderId = x.SenderId,
               SenderUsername = x.SenderUsername,
               SenderPublicAlias = x.SenderPublicAlias,
               IsFile = true,
               ExpirationUTC = x.ExpirationUTC
            }))
         .OrderBy(x => x.ExpirationUTC);
   }
}
