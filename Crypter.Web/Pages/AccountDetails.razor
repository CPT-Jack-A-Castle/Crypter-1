@page "/user/account-details"

@inject HttpClient HttpClient
@inject AppSettings AppSettings
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService

<NavigationUser />
<div class="container my-4">
    <h1>Account Details</h1>
    <form id="DetailsForm">
        <h2>User Details for @Username</h2>
        <div class="mb-3">
            <label for="emailFormControl" class="form-label">Email</label>
            <input @bind="Email" type="email" class="form-control" id="emailFormControl" placeholder="Email Not Set" readonly>
        </div>
        <button type="button" class="btn btn-secondary float-end mt-4" @onclick="OnEditClicked" hidden="@IsEditing">Edit</button>
        <h2>Public Details</h2>
        <div class="mb-3">
            <label for="aliasFormControl" class="form-label">Public Alias</label>
            <input @bind="PublicAlias" type="text" class="form-control" id="aliasFormControl" placeholder="Public Alias Not Set" readonly>
        </div>
        <div class="mb-3">
            <div class="form-check form-switch">
                <label class="form-check-label" for="appearPublicly">Appear publicly</label>
                <input @bind="AppearPublicly" class="form-check-input" type="checkbox" id="appearPublicly" disabled>
            </div>
        </div>
        <div class="mb-3">
            <div class="form-check form-switch">
                <label class="form-check-label" for="acceptAnonymousMessages">Accept messages from anonymous users</label>
                <input @bind="AcceptAnonymousMessages" class="form-check-input" type="checkbox" id="acceptAnonymousMessages" disabled>
            </div>
        </div>
        <div class="mb-3">
            <div class="form-check form-switch">
                <label class="form-check-label" for="acceptAnonymousFiles">Accept files from anonymous users</label>
                <input @bind="AcceptAnonymousFiles" class="form-check-input" type="checkbox" id="acceptAnonymousFiles" disabled>
            </div>
        </div>
        <h2>Keys</h2>
        <div class="mb-3">
            <label for="privateKey" class="form-label">Private key</label>
            <textarea @bind="PrivateKey" class="form-control" id="privateKey" disabled />
        </div>
        <div class="mb-3">
            <label for="publicKey" class="form-label">Public key</label>
            <textarea @bind="PublicKey" class="form-control" id="publicKey" disabled />
        </div>
        @if (IsEditing)
        {
            <button type="button" class="btn btn-primary mx-auto" @onclick="OnSaveClicked">Save</button>
        }
    </form>
</div>

@code {
    private bool IsEditing = false;
    private string Username;
    private string Email;
    private string PublicAlias;
    private bool AppearPublicly;
    private bool AcceptAnonymousMessages;
    private bool AcceptAnonymousFiles;
    private string PrivateKey;
    private string PublicKey;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.User == null)
        {
            NavManager.NavigateTo("login");
        }

        await JsRuntime.InvokeVoidAsync("setTitle", "Crypter - Account Details");
        await GetUserInfo();
    }

    public async Task OnEditClicked()
    {
        await JsRuntime.InvokeVoidAsync("EditAccountDetails");
        IsEditing = true;
    }

    public async Task OnSaveClicked()
    {
        await JsRuntime.InvokeVoidAsync("SaveAccountDetails");

        var url = $"{AppSettings.ApiBaseUrl}/user/update-preferences";
        var token = AuthenticationService.User.Token;

        var request = new HttpRequestMessage(HttpMethod.Put, url);
        var requestBody = new RegisteredUserPublicSettingsRequest(PublicAlias, AppearPublicly, AcceptAnonymousMessages, AcceptAnonymousFiles);

        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
        request.Content = JsonContent.Create(requestBody);

        using var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            // Error handling
        }

        IsEditing = false;
    }

    private async Task GetUserInfo()
    {
        var userAccountInfo = await DownloadUserInfo();
        Username = userAccountInfo.UserName;
        Email = userAccountInfo.Email;
        PublicAlias = userAccountInfo.PublicAlias;
        AppearPublicly = userAccountInfo.IsPublic;
        AcceptAnonymousFiles = userAccountInfo.AllowAnonymousFiles;
        AcceptAnonymousMessages = userAccountInfo.AllowAnonymousMessages;
        PrivateKey = AuthenticationService.User.PrivateKey;
    }

    public async Task<AccountDetailsResponse> DownloadUserInfo()
    {
        var url = $"{AppSettings.ApiBaseUrl}/user/account-details";
        var token = AuthenticationService.User.Token;

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        using var response = await HttpClient.SendAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            // Error handling
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<AccountDetailsResponse>(content);
    }
}
