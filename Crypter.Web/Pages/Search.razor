@page "/user/search"

@inherits SearchBase

<div class="container my-4">
   <h1>Find a user</h1>
   <EditForm Model="@SearchParams" OnValidSubmit="@PerformSearchAsync">
      <DataAnnotationsValidator />
      <div class="row">
         <div class="col-md-3">
            <InputSelect @bind-Value="SearchParams.Type" class="form-select">
               <option selected value="username">Search by Username</option>
               <option value="public-alias">Search by Public Name</option>
            </InputSelect>
         </div>
         <div class="col-md-9">
            <div class="input-group mb-3">
               <InputText @bind-Value="SearchParams.Query" class="form-control" />
               <button class="btn btn-primary" type="submit" id="button-addon2">Search</button>
            </div>
            <ValidationMessage For="@(() => SearchParams.Query)" />
         </div>
      </div>
   </EditForm>
   <div class="row">
      @if (SearchResults != null)
      {
         @if (SearchResults.Total == 0)
         {
            <h3 class="text-center">No results found</h3>
         }
         else
         {
            @foreach (var result in SearchResults.Result)
            {
               <div class="col-md-6">
                  <div class="card my-1">
                     <div class="card-body">
                        <a href="/user/profile/@result.Username">
                           @if (string.IsNullOrEmpty(result.PublicAlias))
                           {
                              <h5 class="card-title">@result.Username</h5>
                           }
                           else
                           {
                              <h5 class="card-title">@result.PublicAlias (@result.Username)</h5>
                           }
                        </a>
                     </div>
                  </div>
               </div>
            }
            if (SearchResults.Total > SearchParams.Results)
            {
               decimal numberPages = (SearchResults.Total / SearchParams.Results);

               <nav aria-label="User Search Results">
                  <ul class="pagination">
                     @for (int i = 0; i <= Math.Ceiling(numberPages); i++)
                     {
                        string pageUrl = "/user/search?query=" + SearchParams.Query + "&type=" + SearchParams.Type + "&page=" + (i + 1);
                        <li class="page-item page"><a class="page-link" @onclick="() => GoToPage(pageUrl)">@(i + 1)</a></li>
                     }
                  </ul>
               </nav>

               SetActivePageAsync();
            }
         }
      }
   </div>
</div>
