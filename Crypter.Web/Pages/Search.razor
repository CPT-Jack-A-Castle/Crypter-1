@page "/user/search"

@inject HttpClient HttpClient
@inject AppSettings AppSettings
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService
@inject IHttpService HttpService

<NavigationUser />
<div class="container my-4">
    <h1>Find a user</h1>
    <div class="row">
        <div class="col-md-3">
            <select @bind="SearchType" class="form-select" aria-label="Select search by">
                <option selected value="username">Search by Username</option>
                <option value="public-name">Search by Public Name</option>
            </select>
        </div>
        <div class="col-md-9">
            <div class="input-group mb-3">
                <input @bind="SearchValue" type="text" class="form-control" placeholder="Enter a @SearchType" aria-label="Recipient's username" aria-describedby="button-addon2">
                <button class="btn btn-primary" type="button" id="button-addon2" @onclick="PerformUserSearch">Search</button>
            </div>
        </div>
    </div>
    <div class="row">
        @if (SearchResults != null)
        {
            @if (SearchResults.Total == 0)
            {
                <h3 class="text-center">No results found</h3>
            }
            else
            {
                @foreach (var result in SearchResults.Result)
                {
                    <div class="col-md-6">
                        <div class="card my-1">
                            <div class="card-body">
                                <a href="">
                                    @if (result.PublicAlias != null)
                                    {
                                        <h5 class="card-title">@result.PublicAlias (@result.Username)</h5>
                                    }
                                    else
                                    {
                                        <h5 class="card-title">@result.Username</h5>
                                    }
                                </a>
                            </div>
                        </div>
                    </div>
                }
                if (SearchResults.Total > NumResults)
                {
                    decimal numberPages = (SearchResults.Total / NumResults);

                    <nav aria-label="User Search Results">
                        <ul class="pagination">
                            @for (int i = 0; i <= Math.Ceiling(numberPages); i++)
                            {
                                string pageUrl = "/user/search?query=" + SearchValue + "&type="  + SearchType + "&page=" + (i + 1);
                                <li class="page-item page"><a class="page-link" @onclick="() => GoToPage(pageUrl)">@(i + 1)</a></li>
                            }
                        </ul>
                    </nav>

                    SetActivePage();
                }
            }
        }
    </div>
</div>

@code {
    private string SearchType = "username";
    private string SearchValue = "";
    private int StartIndex = 0;
    private int NumResults = 20;
    private int Page = 1;
    private bool SearchPerformed = false;
    private UserSearchResponse SearchResults;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.User == null)
        {
            NavManager.NavigateTo("login");
        }

        await JsRuntime.InvokeVoidAsync("setTitle", "Crypter - User Search");
        await QueriedSearchResults();
    }

    private async Task PerformUserSearch()
    {
        string url;

        if (SearchType == "username")
        {
            url = $"{AppSettings.ApiBaseUrl}/user/search/username";
        } else {
            url = $"{AppSettings.ApiBaseUrl}/user/search/public-alias";
        }

        string query = url + "?value=" + SearchValue + "&index=" + StartIndex + "&count=" + NumResults;

        try
        {
            await JsRuntime.InvokeVoidAsync("setPageUrl", "/user/search?query=" + SearchValue + "&type=" + SearchType + "&page=1");
            SearchResults = await HttpService.Get<UserSearchResponse>(query, true);
        } catch {
            SearchResults = null;
        }
    }

    private async Task QueriedSearchResults()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("query", out var value))
        {
            SearchValue = value.First();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("type", out var qType))
        {
            SearchType = qType.First();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("page", out var pageNum))
        {
            Page = Int32.Parse(pageNum.First());
            StartIndex = (Page - 1) * NumResults;
            await PerformUserSearch();
        }
    }

    private void SetActivePage()
    {
        JsRuntime.InvokeVoidAsync("setActivePage", Page);
    }

    private void GoToPage(string pageurl)
    {
        NavManager.NavigateTo(pageurl, true);
    }
}
