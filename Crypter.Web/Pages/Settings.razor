@page "/user/settings"

@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService
@inject IUserService UserService

<div class="container my-4">
   <h1>Settings</h1>
   <form id="DetailsForm">
      <h2>Details for @Username</h2>
      <div class="mb-3">
         <label for="publicUrl">Profile Link</label>
         @if (!AppearPubliclyPersistedValue)
         {
            <span class="text-muted"><br />(Your profile is currently hidden)</span>
         }
         <div class="copiedTooltip">
            <div class="input-group mb-3">
               <input @bind="ProfileUrl" class="form-control" type="url" id="publicUrl" disabled @onclick="CopyToClipboard" />
               <div class="input-group-append">
                  <button class="btn btn-secondary" type="button" @onclick="CopyToClipboard">Copy</button>
               </div>
            </div>
            <span class="copiedToolTip toolTipText">Copied</span>
         </div>
      </div>
      <div class="mb-3">
         <label for="emailFormControl" class="form-label">Email Address</label>
         <input @bind="Email" type="email" class="form-control" id="emailFormControl" placeholder="Email Not Set" readonly>
      </div>
      <button type="button" class="btn btn-secondary float-end mt-4" @onclick="OnEditClicked" hidden="@IsEditing">Edit</button>
      <h2>Privacy Settings</h2>
      <div class="mb-3">
         <label for="aliasFormControl" class="form-label">Public Alias</label>
         <input @bind="PublicAlias" type="text" class="form-control" id="aliasFormControl" placeholder="Public Alias Not Set" readonly>
      </div>
      <div class="mb-3">
         <div class="form-check form-switch">
            <label class="form-check-label" for="appearPublicly">Appear publicly</label>
            <input @bind="AppearPublicly" class="form-check-input" type="checkbox" id="appearPublicly" disabled>
         </div>
      </div>
      <div class="mb-3">
         <div class="form-check form-switch">
            <label class="form-check-label" for="acceptAnonymousMessages">Accept messages from anonymous users</label>
            <input @bind="AcceptAnonymousMessages" class="form-check-input" type="checkbox" id="acceptAnonymousMessages" disabled>
         </div>
      </div>
      <div class="mb-3">
         <div class="form-check form-switch">
            <label class="form-check-label" for="acceptAnonymousFiles">Accept files from anonymous users</label>
            <input @bind="AcceptAnonymousFiles" class="form-check-input" type="checkbox" id="acceptAnonymousFiles" disabled>
         </div>
      </div>
      @if (IsEditing)
      {
         <button type="button" class="btn btn-primary mx-auto" @onclick="OnSaveClicked">Save</button>
      }
      <h2>Keys</h2>
      <div class="mb-3">
         <label for="privateKey" class="form-label">Private key</label>
         <textarea @bind="PrivateKey" class="form-control" id="privateKey" disabled />
      </div>
   </form>
</div>

@code {
   private bool IsEditing = false;
   private string Username;
   private string Email;
   private string PublicAlias;
   private bool AppearPublicly;
   private bool AppearPubliclyPersistedValue;
   private bool AcceptAnonymousMessages;
   private bool AcceptAnonymousFiles;
   private string PrivateKey;
   private string ProfileUrl;

   protected override async Task OnInitializedAsync()
   {
      if (AuthenticationService.User == null)
      {
         NavManager.NavigateTo("/");
         return;
      }

      await JsRuntime.InvokeVoidAsync("setPageTitle", "Crypter - Settings");
      await GetUserInfo();
   }

   public async Task OnEditClicked()
   {
      await JsRuntime.InvokeVoidAsync("EditAccountDetails");
      IsEditing = true;
   }

   public async Task OnSaveClicked()
   {
      await JsRuntime.InvokeVoidAsync("SaveAccountDetails");
      var request = new UpdateUserPrivacyRequest(PublicAlias, AppearPublicly, AcceptAnonymousMessages, AcceptAnonymousFiles);
      await UserService.UpdateUserPrivacyAsync(request);
      IsEditing = false;
      AppearPubliclyPersistedValue = AppearPublicly;
   }

   private async Task GetUserInfo()
   {
      var (_, userAccountInfo) = await UserService.GetUserSettingsAsync();
      Username = userAccountInfo.UserName;
      Email = userAccountInfo.Email;
      PublicAlias = userAccountInfo.PublicAlias;
      AppearPublicly = AppearPubliclyPersistedValue = userAccountInfo.IsPublic;
      AcceptAnonymousFiles = userAccountInfo.AllowAnonymousFiles;
      AcceptAnonymousMessages = userAccountInfo.AllowAnonymousMessages;
      PrivateKey = AuthenticationService.User.PrivateKey;
      ProfileUrl = $"{NavManager.BaseUri}user/profile/{Username}";
   }

   private async Task CopyToClipboard()
   {
      await JsRuntime.InvokeVoidAsync("copyToClipboard", ProfileUrl);
   }
}
