@page "/decrypt/message/{id:guid}"
@page "/decrypt/file/{id:guid}"

@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject AppSettings AppSettings
@inject IAuthenticationService AuthenticationService
@inject IHttpService HttpService

@if (Found)
{
   <div class="container my-4">
      <h1>Decrypt @DataFormat</h1>
      @if (DataFormat == "message")
      {
         <DecryptMessageDetails @bind-Id="Id" @bind-Subject="Subject" @bind-Created="Created" @bind-Expiration="Expiration" @bind-Size="Size"
                                @bind-SenderId="SenderId" @bind-SenderUsername="SenderUsername" @bind-SenderPublicAlias="SenderPublicAlias" @bind-RecipientId="RecipientId"></DecryptMessageDetails>
      }
      else
      {
         <DecryptFileDetails @bind-Id="Id" @bind-FileName="FileName" @bind-ContentType="ContentType" @bind-Created="Created" @bind-Expiration="Expiration" @bind-Size="Size"
                             @bind-SenderId="SenderId" @bind-SenderUsername="SenderUsername" @bind-SenderPublicAlias="SenderPublicAlias" @bind-RecipientId="RecipientId"></DecryptFileDetails>
      }
   </div>
}
else
{
   <div class="container my-4">
      <h2>Not Found</h2>
      <p>The @DataFormat you are looking for is either unavailable or does not exist.</p>
      <p>Possible reasons include:</p>
      <ul>
         <li>
            The URL you were given is invalid
         </li>
         <li>
            The @DataFormat was already decrypted by someone else
         </li>
         <li>
            The @DataFormat automatically expired after 24 hours
         </li>
      </ul>
   </div>
}

@code {
   [Parameter]
   public Guid Id { get; set; }

   // Common properties
   private bool Found;
   private string DataFormat;
   private string Created;
   private string Expiration;
   private int Size;
   private Guid SenderId;
   private string SenderUsername;
   private string SenderPublicAlias;
   private Guid RecipientId;

   // Message properties
   private string Subject;

   // File properties
   private string FileName;
   private string ContentType;

   protected override async Task OnInitializedAsync()
   {
      await JsRuntime.InvokeVoidAsync("setPageTitle", "Crypter - Decrypt");

      var relativeURL = NavManager.ToBaseRelativePath(NavManager.Uri);
      var urlPieces = relativeURL.Split("/");
      DataFormat = urlPieces[1].ToLower();

      if (DataFormat == "message")
      {
         var (httpStatus, response) = await DownloadMessagePreview(Id);
         Found = httpStatus != HttpStatusCode.NotFound;
         if (Found)
         {
            PopulateMessagePreview(response.Subject, response.Size, response.CreationUTC, response.ExpirationUTC, response.SenderId, response.SenderUsername, response.SenderPublicAlias, response.RecipientId);
         }
      }
      else
      {
         var (httpStatus, response) = await DownloadFilePreview(Id);
         Found = httpStatus != HttpStatusCode.NotFound;
         if (Found)
         {
            PopulateFilePreview(response.FileName, response.ContentType, response.Size, response.CreationUTC, response.ExpirationUTC, response.SenderId, response.SenderUsername, response.SenderPublicAlias, response.RecipientId);
         }
      }
   }

   private async Task<(HttpStatusCode HttpStatus, MessagePreviewResponse Response)> DownloadMessagePreview(Guid id)
   {
      var url = AuthenticationService.User is null
         ? $"{AppSettings.ApiBaseUrl}/download/message/preview/anon"
         : $"{AppSettings.ApiBaseUrl}/download/message/preview/auth";
      var requestBody = new GenericPreviewRequest(id);

      var withAuth = AuthenticationService.User != null;
      return await HttpService.Post<MessagePreviewResponse>(url, requestBody, withAuth);
   }

   private async Task<(HttpStatusCode HttpStatus, FilePreviewResponse Response)> DownloadFilePreview(Guid id)
   {
      var url = AuthenticationService.User is null
         ? $"{AppSettings.ApiBaseUrl}/download/file/preview/anon"
         : $"{AppSettings.ApiBaseUrl}/download/file/preview/auth";
      var requestBody = new GenericPreviewRequest(id);

      var withAuth = AuthenticationService.User != null;
      return await HttpService.Post<FilePreviewResponse>(url, requestBody, withAuth);
   }

   private void PopulateMessagePreview(string subject, int size, DateTime created, DateTime expiration, Guid senderId, string senderUsername, string senderPublicAlias, Guid recipientId)
   {
      Subject = subject;
      Created = created.ToLocalTime().ToString();
      Expiration = expiration.ToLocalTime().ToString();
      Size = size;
      SenderId = senderId;
      SenderUsername = senderUsername;
      SenderPublicAlias = senderPublicAlias;
      RecipientId = recipientId;
   }

   private void PopulateFilePreview(string fileName, string contentType, int size, DateTime created, DateTime expiration, Guid senderId, string senderUsername, string senderPublicAlias, Guid recipientId)
   {
      FileName = fileName;
      ContentType = contentType;
      Created = created.ToLocalTime().ToString();
      Expiration = expiration.ToLocalTime().ToString();
      Size = size;
      SenderId = senderId;
      SenderUsername = senderUsername;
      SenderPublicAlias = senderPublicAlias;
      RecipientId = recipientId;
   }
}
