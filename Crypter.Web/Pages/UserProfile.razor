@page "/user/profile/{Username}"

@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IUserService UserService;

<div class="container my-4">
   <div class="row">
      <div class="col-md-6 offset-md-3">
         @if (!Loading)
         {
            if (ProfileFound)
            {
               @if (!string.IsNullOrEmpty(PublicAlias))
               {
                  <h2>@PublicAlias</h2>
               }
               <h3>@($@"{ActualUsername}")</h3>
               <div class="row">
                  <div class="col-12">
                     @if (AllowsFiles)
                     {
                        <button class="btn btn-secondary mr-3" @onclick="@OnEncryptAFileClicked">Send a file</button>
                        <UserFileUploadModal @ref="FileModal" @bind-RecipientUsername="Username" @bind-RecipientPublicKey="UserPublicKey" />
                     }
                     @if (AllowsMessages)
                     {
                        <button class="btn btn-secondary" @onclick="@OnEncryptAMessageClicked">Send a message</button>
                        <UserMessageUploadModal @ref="MessageModal" @bind-RecipientUsername="Username" @bind-RecipientPublicKey="UserPublicKey" />
                     }
                  </div>
               </div>

            }
            else
            {
               <h3 class="text-center">Profile is either not public or does not exist.</h3>
            }
         }
      </div>
   </div>
</div>

@code {
   [Parameter]
   public string Username { get; set; }

   private bool Loading = true;
   private bool ProfileFound = false;
   private string PublicAlias;
   private string ActualUsername;
   private bool AllowsFiles;
   private bool AllowsMessages;
   private string UserPublicKey;

   protected override async Task OnInitializedAsync()
   {
      await JsRuntime.InvokeVoidAsync("setPageTitle", "Crypter - User Profile");
      var (httpStatus, response) = await UserService.GetUserPublicProfileAsync(Username);
      if (httpStatus == HttpStatusCode.NotFound)
      {
         Loading = false;
         return;
      }

      PublicAlias = response.PublicAlias;
      ActualUsername = response.UserName;
      AllowsFiles = response.AllowsFiles;
      AllowsMessages = response.AllowsMessages;
      UserPublicKey = Encoding.UTF8.GetString(Convert.FromBase64String(response.PublicKey));
      ProfileFound = true;
      Loading = false;
   }

   private void OnEncryptAFileClicked()
   {
      FileModal.Open();
   }

   private void OnEncryptAMessageClicked()
   {
      MessageModal.Open();
   }

   private Crypter.Web.Shared.UserFileUploadModal FileModal { get; set; }
   private Crypter.Web.Shared.UserMessageUploadModal MessageModal { get; set; }
}
