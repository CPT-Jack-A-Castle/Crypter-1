@page "/user/profile/{Username}"

@inject NavigationManager NavManager
@inject AppSettings AppSettings
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService
@inject IHttpService HttpService

<div class="container my-4">
    @if (ProfileData != null)
    {
        <div class="row">
            <div class="col-md-6 offset-md-3">
                @if (ProfileData.StatusMessage.ToString() == "NotFound")
                {
                    <h3 class="text-center">Profile is either not public or does not exist.</h3>
                }
                else
                {
                    @if (ProfileData.PublicAlias != null)
                    {
                        <h3>@ProfileData.PublicAlias (@ProfileData.UserName)</h3>
                    }
                    else
                    {
                        <h3>@ProfileData.UserName</h3>
                    }
                    <div class="row">
                        <div class="col-12">
                        @if (ProfileData.AllowsFiles)
                        {
                            <button class="btn btn-secondary mr-3" @onclick="@OnEncryptAFileClicked">Send a file</button>
                            <UserFileUploadModal @ref="FileModal" @bind-Username="Username" @bind-UserPublicKey="UserPublicKey" />
                        }
                        @if (ProfileData.AllowsMessages)
                        {
                            <button class="btn btn-secondary" @onclick="@OnEncryptAMessageClicked">Send a message</button>
                            <UserMessageUploadModal @ref="MessageModal" @bind-Username="Username" @bind-UserPublicKey="UserPublicKey" />
                        }
                        </div>
                    </div>
                    
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Username { get; set; }

    public bool ProfileFound;
    public string NullMessage = "Looking for profile...";

    private AnonymousGetPublicProfileResponse ProfileData;
    private string UserPublicKey;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.InvokeVoidAsync("setPageTitle", "Crypter - User Profile");
        var responseData = await DownloadUserProfile();
        if (responseData == null)
        {
            ProfileFound = false;
            return;
        }

        ProfileFound = true;
        ProfileData = responseData;
        UserPublicKey = Encoding.UTF8.GetString(Convert.FromBase64String(ProfileData.PublicKey));
    }

    private async Task<AnonymousGetPublicProfileResponse> DownloadUserProfile()
    {
        string url = $"{AppSettings.ApiBaseUrl}/user/" + Username;
        return await HttpService.Get<AnonymousGetPublicProfileResponse>(url);
    }

    private void OnEncryptAFileClicked()
    {
        FileModal.Open();
    }

    private void OnEncryptAMessageClicked()
    {
        MessageModal.Open();
    }

    private Crypter.Web.Shared.UserFileUploadModal FileModal { get; set; }
    private Crypter.Web.Shared.UserMessageUploadModal MessageModal { get; set; }
}
