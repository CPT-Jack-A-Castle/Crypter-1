@page "/"

@inject HttpClient HttpClient
@inject AppSettings AppSettings
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService

<div class="container text-center my-4">
    <h1 class="title">Crypter.dev</h1>
    <h2>Private, encrypted file transfer and messaging</h2>
    <div class="container" id="encrypt">
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs" id="myTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="file-tab" data-bs-toggle="tab" data-bs-target="#file" type="button" role="tab" aria-controls="file" aria-selected="true">Encrypt a file</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="message-tab" data-bs-toggle="tab" data-bs-target="#message" type="button" role="tab" aria-controls="message" aria-selected="false">Encrypt a message</button>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                <div class="tab-content" id="myTabContent">
                    <div class="tab-pane fade show active" id="file" role="tabpanel" aria-labelledby="file-tab">
                        <h2 class="card-title mt-0">Upload a file</h2>
                        <FileUpload />
                    </div>
                    <div class="tab-pane fade" id="message" role="tabpanel" aria-labelledby="message-tab">
                        <h2 class="card-title mt-0">Type a message</h2>
                        <MessageUpload />
                    </div>
                </div>
            </div>
        </div>
        @if (!ServerHasDiskSpace || ServerSpacePercentageRemaining < 20)
        {
            <div class="card mt-3">
                <div class="card-body">
                    @if (!ServerHasDiskSpace)
                    {
                        <div class="alert alert-danger" role="alert">
                            <h3>Server is currently out of disk space. More space will become available as uploads are downloaded or expired.</h3>
                        </div>
                    }
                    else if (ServerSpacePercentageRemaining < 20)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h3>Server is currently low on disk space. Please be mindful when transferring large amounts of data.</h3>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code
{
    public bool ServerHasDiskSpace = true;
    public double ServerSpacePercentageRemaining = 100.00;

    protected override async Task OnInitializedAsync()
    {

        if (AuthenticationService.User != null)
        {
            NavManager.NavigateTo("user");
        }

        await JsRuntime.InvokeVoidAsync("setTitle", "Crypter");
        var diskMetricsResponse = await DownloadDiskMetrics();
        ServerHasDiskSpace = !diskMetricsResponse.Full;
        var allocatedServerSpace = long.Parse(diskMetricsResponse.Allocated);
        var availableServerSpace = long.Parse(diskMetricsResponse.Available);

        ServerSpacePercentageRemaining = 100.00 * ((double)availableServerSpace / (double)allocatedServerSpace);
    }

    public async Task<DiskMetricsResponse> DownloadDiskMetrics()
    {
        var url = $"{AppSettings.ApiBaseUrl}/metrics/disk";
        using var response = await HttpClient.GetAsync(url);

        if (!response.IsSuccessStatusCode)
        {
            // insert error handling
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<DiskMetricsResponse>(content);
    }
}