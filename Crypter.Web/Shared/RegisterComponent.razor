@inject AppSettings AppSettings
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject IAuthenticationService AuthenticationService

@if (!RegistrationSuccess)
{
    if (RegistrationError)
    {
        <div class="alert alert-danger" role="alert">
            @RegistrationErrorText
        </div>
    }
    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Username</label>
        <input @bind="Username" type="text" class="form-control" id="usernameFormControl">
    </div>
    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Email <span class="text-black-50">(optional)</span></label>
        <input @bind="Email" type="email" class="form-control" id="emailFormControl">
    </div>
    <div class="mb-3">
        <label for="exampleFormControlTextarea1" class="form-label">Password</label>
        <input @bind="Password" type="password" class="form-control" id="passwordFormControl">
        <a href="/password-reset">Forgot password?</a>
    </div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary mx-auto d-block" @onclick="@(e => OnRegisterClicked(Username, Email, Password))">Register</button>
    </div>
}
else
{
    <div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Registration Successful!</h4>
        <p>Your account has been registered.</p>
        <hr>
        <p class="mb-0">You will now be redirected to the login page...</p>
    </div>
}

@code {
    private string Username;
    private string Email;
    private string Password;
    private bool RegistrationError = false;
    private string RegistrationErrorText = "";
    private bool RegistrationSuccess = false;

    protected override void OnInitialized()
    {
        if (AuthenticationService.User != null)
        {
            //TODO: Revise to Auth homepage when complete
            NavManager.NavigateTo("/user");
        }
    }

    private async Task OnRegisterClicked(string username, string email, string password)
    {
        var url = $"{AppSettings.ApiBaseUrl}/user/register";

        byte[] digestedPassword = CryptoLib.Common.DigestUsernameAndPasswordForAuthentication(username, password);
        string digestedPasswordBase64 = Convert.ToBase64String(digestedPassword);

        var requestBody = new RegisterUserRequest(username, digestedPasswordBase64, email);
        using var response = await HttpClient.PostAsJsonAsync(url, requestBody);

        if (!response.IsSuccessStatusCode)
        {
            RegistrationError = true;
            RegistrationErrorText = response.ReasonPhrase;
        } else
        {
            RegistrationSuccess = true;
            StateHasChanged();
            await Task.Delay(500);
            NavManager.NavigateTo("/login");
        }
    }
}
