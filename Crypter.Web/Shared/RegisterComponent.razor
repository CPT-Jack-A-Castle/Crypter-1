@inject AppSettings AppSettings
@inject NavigationManager NavManager
@inject IAuthenticationService AuthenticationService
@inject IHttpService HttpService

@if (RegistrationSuccess)
{
    <div class="alert alert-success" role="alert">
        <h4 class="alert-heading">Registration Successful!</h4>
        <p>Your account has been registered.</p>
        <hr>
        <p class="mb-0">You will now be redirected to the login page...</p>
    </div>
}
else
{
<EditForm Model="@registerInfo" OnValidSubmit="@OnRegisterClicked">
    <DataAnnotationsValidator />
    @if (RegistrationError)
    {
        <div class="alert alert-danger" role="alert">
            @RegistrationErrorText
        </div>
    }
    <div class="mb-3">
        <label for="usernameFormControl" class="form-label">Username</label>
        <InputText @bind-Value="@registerInfo.Username" class="form-control" id="usernameFormControl" />
        <ValidationMessage For="@(() => registerInfo.Username)" />
    </div>
    <div class="mb-3">
        <label for="passwordFormControl" class="form-label">Password</label>
        <InputText type="password" @bind-Value="@registerInfo.Password" class="form-control" id="passwordFormControl" />
        <ValidationMessage For="@(() => registerInfo.Password)" />
    </div>
    <div class="mb-3">
        <label for="emailFormControl" class="form-label">Email</label>
        <InputText type="email" @bind-Value="@registerInfo.Email" class="form-control" id="emailFormControl" />
        <ValidationMessage For="@(() => registerInfo.Email)" />
    </div>
    <div class="mb-3">
        <label for="betaKeyFormControl" class="form-label">Beta Key</label>
        <InputText @bind-Value="@registerInfo.BetaKey" class="form-control" id="betaKeyFormControl" />
        <ValidationMessage For="@(() => registerInfo.BetaKey)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>
}

@code {
    private Register registerInfo = new Register();

    private bool RegistrationError = false;
    private string RegistrationErrorText = "";
    private bool RegistrationSuccess = false;

    protected override void OnInitialized()
    {
        if (AuthenticationService.User != null)
        {
            //TODO: Revise to Auth homepage when complete
            NavManager.NavigateTo("/user");
        }
    }

    private async Task OnRegisterClicked()
    {
        var url = $"{AppSettings.ApiBaseUrl}/user/register";

        byte[] digestedPassword = CryptoLib.Common.DigestUsernameAndPasswordForAuthentication(registerInfo.Username, registerInfo.Password);
        string digestedPasswordBase64 = Convert.ToBase64String(digestedPassword);

        var requestBody = new RegisterUserRequest(registerInfo.Username, digestedPasswordBase64, registerInfo.BetaKey, registerInfo.Email);
        var response = await HttpService.Post<UserRegisterResponse>(url, requestBody);

        if (response.Result != InsertUserResult.Success)
        {
            RegistrationError = true;
            RegistrationErrorText = response.ResultMessage;
        }
        else
        {
            RegistrationSuccess = true;
            StateHasChanged();
            await Task.Delay(2000);
            NavManager.NavigateTo("/login");
        }
    }
}
