@using BlazorInputFile
@inject IJSRuntime jsRuntime

<div class="file-upload">
    <div class="row">
        <div class="col-12 p-0">
            <div class="dropzone @dropClass rounded">
                <div class="dz-text">
                    <p>Drop file here</p>
                    <p>or</p>
                </div>
                <BlazorInputFile.InputFile id="fileInput" multiple title=""
                                           OnChange="HandleFileInputChange"
                                           @ondragenter="HandleDragEnter"
                                           @ondragleave="HandleDragLeave" />
            </div>
            @if ((fileSizeError || fileCountError))
            {
                <ul class="validation-errors mb-0">
                    @if (fileSizeError)
                    {
                        <li class="validation-message">The max file size is @MaxFileSizeMB MB.</li>
                    }

                    @if (fileCountError)
                    {
                        <li class="validation-message">You can only upload @MaxFileCount file(s).</li>
                    }
                </ul>
            }
            @if (selectedFiles != null && selectedFiles.Count > 0)
            {
                <div class="col-12">
                    <ul>
                        @foreach (var file in selectedFiles)
                        {
                            <li>
                                @file.Name
                                <button class="btn btn-link text-danger p-0 pl-1" type="button"
                                        @onclick="@(e => RemoveFile(file))">
                                    <small class="align-text-bottom">Remove</small>
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12 p-0">
            <button type="button" class="btn btn-primary" @onclick="@(e => EncryptFile(selectedFiles[0], rsaKeySize))">Encrypt</button>
        </div>
    </div>
    <UploadSuccessModal @ref="Modal" @bind-PublicKey="publicKey" @bind-PrivateKey="privateKey" />
</div>

@code {
    const int MaxFileSizeMB = 10;
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024;
    const int MaxFileCount = 1;
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileCountError = false;
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    RsaKeySize rsaKeySize = RsaKeySize._1024;
    string publicKey;
    string privateKey;

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private void HandleFileInputChange(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileCountError = false;

        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (selectedFiles.Count == MaxFileCount)
                {

                    error = true;
                    fileCountError = true;
                }

                if (!error)
                {
                    selectedFiles.Add(file);
                }
            }
        }
    }

    private void RemoveFile(IFileListEntry file)
    {
        selectedFiles.Remove(file);
        fileCountError = false;
    }

    private async Task EncryptFile(IFileListEntry file, RsaKeySize rsaKeySize)
    {
        byte[] fileBytes = new byte[file.Data.Length];
        await file.Data.ReadAsync(fileBytes, 0, (int)file.Data.Length);
        var clientEncryptResult = CryptoLib.Common.DoAnonymousClientEncryption(fileBytes, rsaKeySize);

        // Send this to the API
        Console.WriteLine(clientEncryptResult.CipherText);
        Console.WriteLine(clientEncryptResult.Signature);
        Console.WriteLine(clientEncryptResult.ServerEncryptionKey);

        // Send data to success modal component
        KeyGenerated(clientEncryptResult.KeyPair.Public.ConvertToPEM(), clientEncryptResult.KeyPair.Private.ConvertToPEM());

        // Open modal on key generation
        Modal.Open();
    }

    public void KeyGenerated(string pubKey, string privKey)
    {
        publicKey = pubKey;
        privateKey = privKey;
    }

    private Crypter.Web.Shared.UploadSuccessModal Modal { get; set; }
}
