@using BlazorInputFile

@inject IJSRuntime jsRuntime
@inject HttpClient HttpClient
@inject AppSettings AppSettings

<div class="file-upload" hidden="@IsEncrypting">
    <div class="row">
        <div class="col-12 p-0">
            <div class="card dropzone @dropClass rounded mb-3">
                <p class="card-text dz-text">
                    <i class="bi bi-file-arrow-up d-block fs-1 my-3"></i>
                    <span class="fw-bold">Choose a file</span> or drag it here to upload
                </p>
                <InputFile id="fileInput"
                        OnChange="HandleFileInputChange"
                        @ondragenter="HandleDragEnter"
                        @ondragleave="HandleDragLeave" />
            </div>
            @if ((fileSizeError || fileCountError))
            {
                <div class="validation-errors my-3">
                    @if (fileSizeError)
                    {
                        <div class="alert alert-danger" role="alert">
                            The max file size is @MaxFileSizeMB MB.
                        </div>
                    }

                    @if (fileCountError)
                    {
                        <div class="alert alert-danger" role="alert">
                            You can only upload @MaxFileCount file(s).
                        </div>
                    }
                </div>
            }
            @if (selectedFiles != null && selectedFiles.Count > 0)
            {
                <div class="card my-3">
                    <div class="card-body">
                        @selectedFiles[0].Name
                        <button type="button" class="btn-close float-end" aria-label="Remove file" @onclick="@(e => RemoveFile(selectedFiles[0]))"></button>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12 p-0">
            <button type="button" class="btn btn-primary mx-auto d-block" @onclick="@(e => EncryptFile(selectedFiles[0], encryptionStrength))">Encrypt</button>
        </div>
    </div>
    <UploadSuccessModal @ref="Modal" @bind-DataFormat="dataFormat" @bind-ReturnedId="returnedId" @bind-PublicKey="publicKey" @bind-PrivateKey="privateKey" />
</div>

<div class="encrypt-status" hidden="@(!IsEncrypting)">
    <h3>@EncryptionStatusMessage</h3>
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@code {
    // Constants
    private const int MaxFileSizeMB = 10;
    private const int MaxFileSize = MaxFileSizeMB * 1024 * 1024;
    private const int MaxFileCount = 1;

    // State
    private bool IsEncrypting = false;
    private string EncryptionStatusMessage = "";

    // User input
    private List<IFileListEntry> selectedFiles = new List<IFileListEntry>();
    private CryptoStrength encryptionStrength = CryptoStrength.Minimum;

    // Variables we control
    private string dropClass = "";
    private bool fileSizeError = false;
    private bool fileCountError = false;
    private Guid returnedId;
    private string publicKey;
    private string privateKey;
    private string dataFormat;

    private void HandleDragEnter()
    {
        dropClass = "dropzone-drag";
    }

    private void HandleDragLeave()
    {
        dropClass = "";
    }

    private void HandleFileInputChange(IFileListEntry[] files)
    {
        dropClass = "";
        fileSizeError = false;
        fileCountError = false;

        if (files != null)
        {
            foreach (var file in files)
            {
                bool error = false;
                if (file.Size > MaxFileSize)
                {
                    error = true;
                    fileSizeError = true;
                }

                if (selectedFiles.Count == MaxFileCount)
                {

                    error = true;
                    fileCountError = true;
                }

                if (!error)
                {
                    selectedFiles.Add(file);
                }
            }
        }
    }

    private void RemoveFile(IFileListEntry file)
    {
        selectedFiles.Remove(file);
        fileCountError = false;
    }

    private async Task EncryptFile(IFileListEntry file, CryptoStrength strength)
    {
        // Hide file upload on encryption
        IsEncrypting = true;
        await SetNewEncryptionStatus("Creating symmetric key");
        var symmetricCryptoParams = CryptoLib.Common.GenerateSymmetricCryptoParams(strength);
        var hashedSymmetricKey = DigestMethods.GetDigest(symmetricCryptoParams.Key.ConvertToBytes(), DigestAlgorithm.SHA256);

        await SetNewEncryptionStatus("Encrypting your file");
        var stream = new MemoryStream();        // Todo, can this be cleaned up?
        await file.Data.CopyToAsync(stream);    // Reference: https://github.com/SteveSandersonMS/BlazorInputFile/blob/master/samples/Sample.Core/Pages/SingleFile.razor
        var fileBytes = stream.ToArray();       // WARNING: The "MaxMessageSize" for the InputFile is 20 * 1024. I think this is why copying to stream then to byte[] is required for larger files
        var cipherText = CryptoLib.Common.DoSymmetricEncryption(fileBytes, symmetricCryptoParams);

        await SetNewEncryptionStatus("Creating asymmetric keys. This may take a while.");
        var asymmetricKeys = CryptoLib.Common.GenerateAsymmetricKeys(strength);

        await SetNewEncryptionStatus("Creating a signature");
        var signature = CryptoLib.Common.CreateEncryptedSignature(fileBytes, symmetricCryptoParams, asymmetricKeys.Public, strength);

        await SetNewEncryptionStatus("Preparing to upload");
        var encodedCipherText = Convert.ToBase64String(cipherText);
        var encodedSignature = Convert.ToBase64String(signature);
        var serverEncryptionKey = Convert.ToBase64String(hashedSymmetricKey);

        await SetNewEncryptionStatus("Uploading");
        var response = await UploadFileToAPI(file.Name, file.Type, encodedCipherText, encodedSignature, serverEncryptionKey);

        // Send data to success modal component
        CompletedUpload("file", response.Id,
           Convert.ToBase64String(Encoding.UTF8.GetBytes(asymmetricKeys.Public.ConvertToPEM())),
           Convert.ToBase64String(Encoding.UTF8.GetBytes(asymmetricKeys.Private.ConvertToPEM())));

        // Open modal
        Modal.Open();

        // Reset File Uploads
        RemoveFile(selectedFiles[0]);

        // Show file upload after encryption
        IsEncrypting = false;
    }

    public async Task SetNewEncryptionStatus(string status)
    {
        EncryptionStatusMessage = status;
        StateHasChanged();
        await Task.Delay(500);
    }

    public void CompletedUpload(string format, Guid id, string pubKey, string privKey)
    {
        dataFormat = format;
        returnedId = id;
        publicKey = pubKey;
        privateKey = privKey;
    }

    private async Task<AnonymousUploadResponse> UploadFileToAPI(string filename, string contentType, string cipherText, string signature, string serverEncryptionKey)
    {
        var requestBody = new AnonymousFileUploadRequest
        {
            Name = filename,
            ContentType = contentType,
            CipherText = cipherText,
            Signature = signature,
            ServerEncryptionKey = serverEncryptionKey
        };

        using var response = await HttpClient.PostAsJsonAsync($"{AppSettings.ApiBaseUrl}/file", requestBody);

        if (!response.IsSuccessStatusCode)
        {
            // insert error handling
        }

        var content = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<AnonymousUploadResponse>(content);
    }

    private Crypter.Web.Shared.UploadSuccessModal Modal { get; set; }
}
