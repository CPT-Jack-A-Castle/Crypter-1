@inject AppSettings AppSettings
@inject IHttpService HttpService

@if (!ServerHasDiskSpace || ServerSpacePercentageRemaining < 20)
{
    <div class="card mt-3">
        <div class="card-body">
            @if (!ServerHasDiskSpace)
            {
                <div class="alert alert-danger mb-0" role="alert">
                    <h3>Server is currently out of disk space. More space will become available as uploads are downloaded or expired.</h3>
                </div>
            }
            else if (ServerSpacePercentageRemaining < 20)
            {
                <div class="alert alert-warning mb-0" role="alert">
                    <h3>Server is currently low on disk space. Please be mindful when transferring large amounts of data.</h3>
                </div>
            }
        </div>
    </div>
}

@code {
    public bool ServerHasDiskSpace = true;
    public double ServerSpacePercentageRemaining = 100.00;

    protected override async Task OnInitializedAsync()
    {
        var diskMetricsResponse = await DownloadDiskMetrics();
        if (diskMetricsResponse == null)
        {
            ServerHasDiskSpace = false;
        }
        else
        {
            ServerHasDiskSpace = !diskMetricsResponse.Full;
            var allocatedServerSpace = long.Parse(diskMetricsResponse.Allocated);
            var availableServerSpace = long.Parse(diskMetricsResponse.Available);
            ServerSpacePercentageRemaining = 100.00 * ((double)availableServerSpace / (double)allocatedServerSpace);
        }
    }

    public async Task<DiskMetricsResponse> DownloadDiskMetrics()
    {
        var url = $"{AppSettings.ApiBaseUrl}/metrics/disk";
        return await HttpService.Get<DiskMetricsResponse>(url);
    }
}
