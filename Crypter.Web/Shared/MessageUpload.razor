@inject IJSRuntime jsRuntime

<div class="message-upload">
    <div class="row">
        <div class="col-12 p-0">
            <textarea @bind="MessageText" @bind:event="oninput" id="messageText" name="messageText" rows="5" cols="57" placeholder="Type your message here..." maxlength="@MaxMessageLength"></textarea>
            <label><small class="align-text-bottom">@(MaxMessageLength - MessageText.Count()) remaining</small></label>
        </div>
    </div>
    <div class="row">
        <div class="col-12 p-0">
            <button type="button" class="btn btn-primary" @onclick="@(e => EncryptMessage(MessageText, rsaKeySize))">Encrypt</button>
        </div>
    </div>
    <UploadSuccessModal @ref="Modal" @bind-PublicKey="publicKey" @bind-PrivateKey="privateKey" />
</div>

@code {
    const int MaxMessageLength = 1024;
    string MessageText = "";
    string publicKey;
    string privateKey;

    RsaKeySize rsaKeySize = RsaKeySize._1024;

    private void EncryptMessage(string message, RsaKeySize rsaKeySize)
    {
        byte[] messageBytes = Encoding.UTF8.GetBytes(message);
        var clientEncryptResult = CryptoLib.Common.DoAnonymousClientEncryption(messageBytes, rsaKeySize);

        // Send this to the API
        Console.WriteLine(clientEncryptResult.CipherText);
        Console.WriteLine(clientEncryptResult.Signature);
        Console.WriteLine(clientEncryptResult.ServerEncryptionKey);

        // Send data to success modal component
        KeyGenerated(clientEncryptResult.KeyPair.Public.ConvertToPEM(), clientEncryptResult.KeyPair.Private.ConvertToPEM());

        // Open modal on key generation
        Modal.Open();
    }

    public void KeyGenerated(string pubKey, string privKey)
    {
        publicKey = pubKey;
        privateKey = privKey;
    }

    private Crypter.Web.Shared.UploadSuccessModal Modal { get; set; }
}
