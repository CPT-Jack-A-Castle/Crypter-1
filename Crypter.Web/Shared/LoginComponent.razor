@inject AppSettings AppSettings
@inject HttpClient HttpClient
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@if (!LoginSuccess)
{
    if (LoginError)
    {
        <div class="alert alert-danger" role="alert">
            @LoginErrorText
        </div>
    }
    <div class="mb-3">
        <label for="exampleFormControlInput1" class="form-label">Username</label>
        <input @bind="Username" type="text" class="form-control" id="usernameFormControl">
        <a href="/request-username">Forgot username?</a>
    </div>
    <div class="mb-3">
        <label for="exampleFormControlTextarea1" class="form-label">Password</label>
        <input @bind="Password" type="password" class="form-control" id="passwordFormControl">
        <a href="/password-reset">Forgot password?</a>
    </div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary mx-auto d-block" @onclick="@(e => OnLoginClicked(Username, Password))">Login</button>
    </div>
}
else
{
    <div class="alert alert-success" role="alert">
        Login successful!
    </div>
}

@code {
    private string Username;
    private string Password;
    private bool LoginError = false;
    private string LoginErrorText = "";
    private bool LoginSuccess = false;

    private async Task OnLoginClicked(string username, string password)
    {
        var url = $"{AppSettings.ApiBaseUrl}/user/authenticate";

        byte[] digestedPassword = CryptoLib.Common.DigestUsernameAndPasswordForAuthentication(username, password);
        string digestedPasswordBase64 = Convert.ToBase64String(digestedPassword);

        var requestBody = new AuthenticateUserRequest(Username, digestedPasswordBase64);
        using var response = await HttpClient.PostAsJsonAsync(url, requestBody);
        var content = await response.Content.ReadAsStringAsync();
        var jsonResponse = JsonConvert.DeserializeObject<AuthenticateUserResponse>(content);
        if (!response.IsSuccessStatusCode)
        {
            LoginError = true;
            switch ((int)jsonResponse.Status)
            {
                case 1:
                    LoginErrorText = "Invalid Request";
                    break;
                case 5:
                    LoginErrorText = "Usename and/or password is incorrect";
                    break;
                default:
                    LoginErrorText = "Unknown error";
                    break;
            }
        }
        else
        {
            await sessionStorage.SetItemAsync("AuthToken", jsonResponse.Token);
            await sessionStorage.SetItemAsync("Id", jsonResponse.Id);
            LoginSuccess = true;
            await Task.Delay(500);
            NavManager.NavigateTo("/account-details");
        }
    }
}
