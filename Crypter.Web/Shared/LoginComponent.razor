@inject AppSettings AppSettings
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject IAuthenticationService AuthenticationService
@inject IHttpService HttpService

<EditForm Model="@loginInfo" OnValidSubmit="@OnLoginClicked">
   <DataAnnotationsValidator />
   @if (LoginError)
   {
      <div class="alert alert-danger" role="alert">
         @LoginErrorText
      </div>
   }
   <div class="mb-3">
      <label for="usernameFormControl" class="form-label">Username</label>
      <InputText @bind-Value="@loginInfo.Username" class="form-control" id="usernameFormControl" />
      <ValidationMessage For="@(() => loginInfo.Username)" />
   </div>
   <div class="mb-3">
      <label for="passwordFormControl" class="form-label">Password</label>
      <InputText type="password" @bind-Value="@loginInfo.Password" class="form-control" id="passwordFormControl" />
      <ValidationMessage For="@(() => loginInfo.Password)" />
   </div>
   <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<BasicModal @ref="BasicModal" @bind-Subject="BasicModalSubject" @bind-Message="BasicModalMessage" @bind-PrimaryButtonText="BasicModalPrimaryButtonText" @bind-SecondaryButtonText="BasicModalSecondaryButtonText" @bind-ShowSecondaryButton="BasicModalShowSecondaryButton" ModalClosed="@BasicModalClosedHandler" />
<SpinnerModal @ref="SpinnerModal" @bind-Subject="SpinnerModalSubject" @bind-Message="SpinnerModalMessage" @bind-ShowPrimaryButton="SpinnerModalShowPrimaryButton" @bind-PrimaryButtonText="SpinnerModalPrimaryButtonText" ModalClosed="@SpinnerModalClosedHandler" />

@code {
   private Login loginInfo = new Login();

   private bool LoginError = false;
   private string LoginErrorText = "";

   private string BasicModalSubject;
   private string BasicModalMessage;
   private string BasicModalPrimaryButtonText;
   private string BasicModalSecondaryButtonText;
   private bool BasicModalShowSecondaryButton;
   private Func<bool, Task> BasicModalClosedHandler;

   private string SpinnerModalSubject;
   private string SpinnerModalMessage;
   private string SpinnerModalPrimaryButtonText;
   private bool SpinnerModalShowPrimaryButton;
   private Action<bool> SpinnerModalClosedHandler;

   protected override void OnInitialized()
   {
      if (AuthenticationService.User != null)
      {
         NavManager.NavigateTo("/user/home");
      }
   }

   private async Task OnLoginClicked()
   {
      byte[] digestedPassword = CryptoLib.Common.DigestUsernameAndPasswordForAuthentication(loginInfo.Username, loginInfo.Password);
      string digestedPasswordBase64 = Convert.ToBase64String(digestedPassword);

      var authSuccess = await AuthenticationService.Login(loginInfo.Username, loginInfo.Password, digestedPasswordBase64);

      if (authSuccess)
      {
         if (string.IsNullOrEmpty(AuthenticationService.User.PrivateKey))
         {
            PromptUserToCreateKeyPair();
         }
         else
         {
            OnLoginCompleted();
         }
      }
      else
      {
         LoginError = true;
         LoginErrorText = "Incorrect username or password";
      }
   }

   private void OnLoginCompleted()
   {
      var returnUrl = NavManager.QueryString("returnUrl") ?? "user/home";
      NavManager.NavigateTo(returnUrl);
   }

   private async Task GenerateAndUploadKeys()
   {
      var keyPair = await GenerateUserKeyPair();
      var encodedPublicKey = Convert.ToBase64String(
          Encoding.UTF8.GetBytes(keyPair.publicKey));

      var encodedEncryptedPrivateKey = Convert.ToBase64String(
          EncryptPrivateKey(keyPair.privateKey));

      var updateKeysUrl = $"{AppSettings.ApiBaseUrl}/user/update-personal-keys";
      var updateKeysRequestBody = new UpdateUserKeysRequest(encodedEncryptedPrivateKey, encodedPublicKey);
      await HttpService.Post<UpdateUserKeysResponse>(updateKeysUrl, updateKeysRequestBody, true);
   }

   private async Task<(string privateKey, string publicKey)> GenerateUserKeyPair()
   {
      var keyPair = await Task.Run(() => CryptoLib.Common.GenerateAsymmetricKeys(CryptoStrength.Standard));
      var privateKey = keyPair.Private.ConvertToPEM();
      var publicKey = keyPair.Public.ConvertToPEM();
      return (privateKey, publicKey);
   }

   private byte[] EncryptPrivateKey(string privatePemKey)
   {
      var privateKeyBytes = Encoding.UTF8.GetBytes(privatePemKey);
      var symmetricEncryptionKey = CryptoLib.Common.CreateSymmetricKeyFromUserDetails(loginInfo.Username, loginInfo.Password, AuthenticationService.User.Id.ToString());
      return CryptoLib.Common.DoSymmetricEncryption(privateKeyBytes, symmetricEncryptionKey);
   }

   private void PromptUserToCreateKeyPair()
   {
      BasicModalSubject = "Generate your keys";
      BasicModalMessage = "We need to generate some cryptographic keys to finish setting up your Crypter account." +
         " This usually takes a while and your browser may stop responding." +
         " Please be patient.";
      BasicModalPrimaryButtonText = "Generate Keys";
      BasicModalSecondaryButtonText = "";
      BasicModalShowSecondaryButton = false;
      BasicModalClosedHandler = ProceedWithKeyCreation;
      BasicModal.Open();
   }

   private async Task ProceedWithKeyCreation(bool closedInTheAffirmative)
   {
      await ShowSpinnerWhileCreatingKeyPair();
      await GenerateAndUploadKeys();
      await SpinnerModal.Close(true);
   }

   private async Task ShowSpinnerWhileCreatingKeyPair()
   {
      SpinnerModalSubject = "Generating your keys";
      SpinnerModalMessage = "Your keys are being generated." +
         " This usually takes a while and your browser may stop responding." +
         " Please be patient.";
      SpinnerModalPrimaryButtonText = "";
      SpinnerModalShowPrimaryButton = false;
      SpinnerModalClosedHandler = InformUserKeysCreated;
      SpinnerModal.Open();
      StateHasChanged();
      await Task.Delay(500);
   }

   private void InformUserKeysCreated(bool closedInTheAffirmative)
   {
      BasicModalSubject = "Done";
      BasicModalMessage = "Your keys have been generated. Click 'OK' to continue logging in.";
      BasicModalPrimaryButtonText = "OK";
      BasicModalClosedHandler = ProceedWithLoginAfterKeyCreation;
      StateHasChanged();
      BasicModal.Open();
   }

   private async Task ProceedWithLoginAfterKeyCreation(bool closedInTheAffirmative)
   {
      await OnLoginClicked();
   }

   private Crypter.Web.Shared.Modal.BasicModal BasicModal { get; set; }
   private Crypter.Web.Shared.Modal.SpinnerModal SpinnerModal { get; set; }
}
